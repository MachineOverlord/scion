// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SCIONDMsg struct{ capnp.Struct }
type SCIONDMsg_Which uint16

const (
	SCIONDMsg_Which_unset              SCIONDMsg_Which = 0
	SCIONDMsg_Which_pathReq            SCIONDMsg_Which = 1
	SCIONDMsg_Which_pathReply          SCIONDMsg_Which = 2
	SCIONDMsg_Which_asInfoReq          SCIONDMsg_Which = 3
	SCIONDMsg_Which_asInfoReply        SCIONDMsg_Which = 4
	SCIONDMsg_Which_revNotification    SCIONDMsg_Which = 5
	SCIONDMsg_Which_ifInfoRequest      SCIONDMsg_Which = 6
	SCIONDMsg_Which_ifInfoReply        SCIONDMsg_Which = 7
	SCIONDMsg_Which_serviceInfoRequest SCIONDMsg_Which = 8
	SCIONDMsg_Which_serviceInfoReply   SCIONDMsg_Which = 9
	SCIONDMsg_Which_revReply           SCIONDMsg_Which = 10
	SCIONDMsg_Which_segTypeHopReq      SCIONDMsg_Which = 11
	SCIONDMsg_Which_segTypeHopReply    SCIONDMsg_Which = 12
)

func (w SCIONDMsg_Which) String() string {
	const s = "unsetpathReqpathReplyasInfoReqasInfoReplyrevNotificationifInfoRequestifInfoReplyserviceInfoRequestserviceInfoReplyrevReplysegTypeHopReqsegTypeHopReply"
	switch w {
	case SCIONDMsg_Which_unset:
		return s[0:5]
	case SCIONDMsg_Which_pathReq:
		return s[5:12]
	case SCIONDMsg_Which_pathReply:
		return s[12:21]
	case SCIONDMsg_Which_asInfoReq:
		return s[21:30]
	case SCIONDMsg_Which_asInfoReply:
		return s[30:41]
	case SCIONDMsg_Which_revNotification:
		return s[41:56]
	case SCIONDMsg_Which_ifInfoRequest:
		return s[56:69]
	case SCIONDMsg_Which_ifInfoReply:
		return s[69:80]
	case SCIONDMsg_Which_serviceInfoRequest:
		return s[80:98]
	case SCIONDMsg_Which_serviceInfoReply:
		return s[98:114]
	case SCIONDMsg_Which_revReply:
		return s[114:122]
	case SCIONDMsg_Which_segTypeHopReq:
		return s[122:135]
	case SCIONDMsg_Which_segTypeHopReply:
		return s[135:150]

	}
	return "SCIONDMsg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SCIONDMsg_TypeID is the unique identifier for the type SCIONDMsg.
const SCIONDMsg_TypeID = 0x91ea9bb47f46c346

func NewSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func NewRootSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func ReadRootSCIONDMsg(msg *capnp.Message) (SCIONDMsg, error) {
	root, err := msg.RootPtr()
	return SCIONDMsg{root.Struct()}, err
}

func (s SCIONDMsg) String() string {
	str, _ := text.Marshal(0x91ea9bb47f46c346, s.Struct)
	return str
}

func (s SCIONDMsg) Which() SCIONDMsg_Which {
	return SCIONDMsg_Which(s.Struct.Uint16(8))
}
func (s SCIONDMsg) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s SCIONDMsg) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SCIONDMsg) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s SCIONDMsg) PathReq() (PathReq, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != pathReq")
	}
	p, err := s.Struct.Ptr(0)
	return PathReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReq(v PathReq) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReq sets the pathReq field to a newly
// allocated PathReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReq() (PathReq, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewPathReq(s.Struct.Segment())
	if err != nil {
		return PathReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) PathReply() (PathReply, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != pathReply")
	}
	p, err := s.Struct.Ptr(0)
	return PathReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReply() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReply(v PathReply) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReply sets the pathReply field to a newly
// allocated PathReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReply() (PathReply, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPathReply(s.Struct.Segment())
	if err != nil {
		return PathReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReq() (ASInfoReq, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != asInfoReq")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReq() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReq(v ASInfoReq) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReq sets the asInfoReq field to a newly
// allocated ASInfoReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReq() (ASInfoReq, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewASInfoReq(s.Struct.Segment())
	if err != nil {
		return ASInfoReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReply() (ASInfoReply, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != asInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReply() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReply(v ASInfoReply) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReply sets the asInfoReply field to a newly
// allocated ASInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReply() (ASInfoReply, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewASInfoReply(s.Struct.Segment())
	if err != nil {
		return ASInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevNotification() (RevNotification, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != revNotification")
	}
	p, err := s.Struct.Ptr(0)
	return RevNotification{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevNotification() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevNotification(v RevNotification) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevNotification sets the revNotification field to a newly
// allocated RevNotification struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevNotification() (RevNotification, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewRevNotification(s.Struct.Segment())
	if err != nil {
		return RevNotification{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoRequest() (IFInfoRequest, error) {
	if s.Struct.Uint16(8) != 6 {
		panic("Which() != ifInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoRequest() bool {
	if s.Struct.Uint16(8) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoRequest(v IFInfoRequest) error {
	s.Struct.SetUint16(8, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoRequest sets the ifInfoRequest field to a newly
// allocated IFInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoRequest() (IFInfoRequest, error) {
	s.Struct.SetUint16(8, 6)
	ss, err := NewIFInfoRequest(s.Struct.Segment())
	if err != nil {
		return IFInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoReply() (IFInfoReply, error) {
	if s.Struct.Uint16(8) != 7 {
		panic("Which() != ifInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoReply() bool {
	if s.Struct.Uint16(8) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoReply(v IFInfoReply) error {
	s.Struct.SetUint16(8, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoReply sets the ifInfoReply field to a newly
// allocated IFInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoReply() (IFInfoReply, error) {
	s.Struct.SetUint16(8, 7)
	ss, err := NewIFInfoReply(s.Struct.Segment())
	if err != nil {
		return IFInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoRequest() (ServiceInfoRequest, error) {
	if s.Struct.Uint16(8) != 8 {
		panic("Which() != serviceInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoRequest() bool {
	if s.Struct.Uint16(8) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoRequest(v ServiceInfoRequest) error {
	s.Struct.SetUint16(8, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoRequest sets the serviceInfoRequest field to a newly
// allocated ServiceInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoRequest() (ServiceInfoRequest, error) {
	s.Struct.SetUint16(8, 8)
	ss, err := NewServiceInfoRequest(s.Struct.Segment())
	if err != nil {
		return ServiceInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoReply() (ServiceInfoReply, error) {
	if s.Struct.Uint16(8) != 9 {
		panic("Which() != serviceInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoReply() bool {
	if s.Struct.Uint16(8) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoReply(v ServiceInfoReply) error {
	s.Struct.SetUint16(8, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoReply sets the serviceInfoReply field to a newly
// allocated ServiceInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoReply() (ServiceInfoReply, error) {
	s.Struct.SetUint16(8, 9)
	ss, err := NewServiceInfoReply(s.Struct.Segment())
	if err != nil {
		return ServiceInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevReply() (RevReply, error) {
	if s.Struct.Uint16(8) != 10 {
		panic("Which() != revReply")
	}
	p, err := s.Struct.Ptr(0)
	return RevReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevReply() bool {
	if s.Struct.Uint16(8) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevReply(v RevReply) error {
	s.Struct.SetUint16(8, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevReply sets the revReply field to a newly
// allocated RevReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevReply() (RevReply, error) {
	s.Struct.SetUint16(8, 10)
	ss, err := NewRevReply(s.Struct.Segment())
	if err != nil {
		return RevReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReq() (SegTypeHopReq, error) {
	if s.Struct.Uint16(8) != 11 {
		panic("Which() != segTypeHopReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReq() bool {
	if s.Struct.Uint16(8) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReq(v SegTypeHopReq) error {
	s.Struct.SetUint16(8, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReq sets the segTypeHopReq field to a newly
// allocated SegTypeHopReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReq() (SegTypeHopReq, error) {
	s.Struct.SetUint16(8, 11)
	ss, err := NewSegTypeHopReq(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReply() (SegTypeHopReply, error) {
	if s.Struct.Uint16(8) != 12 {
		panic("Which() != segTypeHopReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReply() bool {
	if s.Struct.Uint16(8) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReply(v SegTypeHopReply) error {
	s.Struct.SetUint16(8, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReply sets the segTypeHopReply field to a newly
// allocated SegTypeHopReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReply() (SegTypeHopReply, error) {
	s.Struct.SetUint16(8, 12)
	ss, err := NewSegTypeHopReply(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SCIONDMsg) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SCIONDMsg_List is a list of SCIONDMsg.
type SCIONDMsg_List struct{ capnp.List }

// NewSCIONDMsg creates a new list of SCIONDMsg.
func NewSCIONDMsg_List(s *capnp.Segment, sz int32) (SCIONDMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return SCIONDMsg_List{l}, err
}

func (s SCIONDMsg_List) At(i int) SCIONDMsg { return SCIONDMsg{s.List.Struct(i)} }

func (s SCIONDMsg_List) Set(i int, v SCIONDMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s SCIONDMsg_List) String() string {
	str, _ := text.MarshalList(0x91ea9bb47f46c346, s.List)
	return str
}

// SCIONDMsg_Promise is a wrapper for a SCIONDMsg promised by a client call.
type SCIONDMsg_Promise struct{ *capnp.Pipeline }

func (p SCIONDMsg_Promise) Struct() (SCIONDMsg, error) {
	s, err := p.Pipeline.Struct()
	return SCIONDMsg{s}, err
}

func (p SCIONDMsg_Promise) PathReq() PathReq_Promise {
	return PathReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) PathReply() PathReply_Promise {
	return PathReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReq() ASInfoReq_Promise {
	return ASInfoReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReply() ASInfoReply_Promise {
	return ASInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevNotification() RevNotification_Promise {
	return RevNotification_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoRequest() IFInfoRequest_Promise {
	return IFInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoReply() IFInfoReply_Promise {
	return IFInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoRequest() ServiceInfoRequest_Promise {
	return ServiceInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoReply() ServiceInfoReply_Promise {
	return ServiceInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevReply() RevReply_Promise {
	return RevReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReq() SegTypeHopReq_Promise {
	return SegTypeHopReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReply() SegTypeHopReply_Promise {
	return SegTypeHopReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathReq struct{ capnp.Struct }
type PathReq_flags PathReq

// PathReq_TypeID is the unique identifier for the type PathReq.
const PathReq_TypeID = 0xc4c61531dcc4a3eb

func NewPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func NewRootPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func ReadRootPathReq(msg *capnp.Message) (PathReq, error) {
	root, err := msg.RootPtr()
	return PathReq{root.Struct()}, err
}

func (s PathReq) String() string {
	str, _ := text.Marshal(0xc4c61531dcc4a3eb, s.Struct)
	return str
}

func (s PathReq) Dst() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathReq) SetDst(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathReq) Src() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathReq) SetSrc(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s PathReq) MaxPaths() uint16 {
	return s.Struct.Uint16(16)
}

func (s PathReq) SetMaxPaths(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s PathReq) Flags() PathReq_flags { return PathReq_flags(s) }

func (s PathReq_flags) Refresh() bool {
	return s.Struct.Bit(144)
}

func (s PathReq_flags) SetRefresh(v bool) {
	s.Struct.SetBit(144, v)
}

func (s PathReq_flags) Hidden() bool {
	return s.Struct.Bit(145)
}

func (s PathReq_flags) SetHidden(v bool) {
	s.Struct.SetBit(145, v)
}

func (s PathReq) HpCfgs() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s PathReq) HasHpCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReq) SetHpCfgs(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHpCfgs sets the hpCfgs field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s PathReq) NewHpCfgs(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReq_List is a list of PathReq.
type PathReq_List struct{ capnp.List }

// NewPathReq creates a new list of PathReq.
func NewPathReq_List(s *capnp.Segment, sz int32) (PathReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PathReq_List{l}, err
}

func (s PathReq_List) At(i int) PathReq { return PathReq{s.List.Struct(i)} }

func (s PathReq_List) Set(i int, v PathReq) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReq_List) String() string {
	str, _ := text.MarshalList(0xc4c61531dcc4a3eb, s.List)
	return str
}

// PathReq_Promise is a wrapper for a PathReq promised by a client call.
type PathReq_Promise struct{ *capnp.Pipeline }

func (p PathReq_Promise) Struct() (PathReq, error) {
	s, err := p.Pipeline.Struct()
	return PathReq{s}, err
}

func (p PathReq_Promise) Flags() PathReq_flags_Promise { return PathReq_flags_Promise{p.Pipeline} }

// PathReq_flags_Promise is a wrapper for a PathReq_flags promised by a client call.
type PathReq_flags_Promise struct{ *capnp.Pipeline }

func (p PathReq_flags_Promise) Struct() (PathReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return PathReq_flags{s}, err
}

type PathReply struct{ capnp.Struct }

// PathReply_TypeID is the unique identifier for the type PathReply.
const PathReply_TypeID = 0xf10fe9b6293ee63f

func NewPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func NewRootPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func ReadRootPathReply(msg *capnp.Message) (PathReply, error) {
	root, err := msg.RootPtr()
	return PathReply{root.Struct()}, err
}

func (s PathReply) String() string {
	str, _ := text.Marshal(0xf10fe9b6293ee63f, s.Struct)
	return str
}

func (s PathReply) ErrorCode() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathReply) SetErrorCode(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathReply) Entries() (PathReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathReplyEntry_List{List: p.List()}, err
}

func (s PathReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReply) SetEntries(v PathReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated PathReplyEntry_List, preferring placement in s's segment.
func (s PathReply) NewEntries(n int32) (PathReplyEntry_List, error) {
	l, err := NewPathReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return PathReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReply_List is a list of PathReply.
type PathReply_List struct{ capnp.List }

// NewPathReply creates a new list of PathReply.
func NewPathReply_List(s *capnp.Segment, sz int32) (PathReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathReply_List{l}, err
}

func (s PathReply_List) At(i int) PathReply { return PathReply{s.List.Struct(i)} }

func (s PathReply_List) Set(i int, v PathReply) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReply_List) String() string {
	str, _ := text.MarshalList(0xf10fe9b6293ee63f, s.List)
	return str
}

// PathReply_Promise is a wrapper for a PathReply promised by a client call.
type PathReply_Promise struct{ *capnp.Pipeline }

func (p PathReply_Promise) Struct() (PathReply, error) {
	s, err := p.Pipeline.Struct()
	return PathReply{s}, err
}

type PathReplyEntry struct{ capnp.Struct }

// PathReplyEntry_TypeID is the unique identifier for the type PathReplyEntry.
const PathReplyEntry_TypeID = 0xc5ff2e54709776ec

func NewPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PathReplyEntry{st}, err
}

func NewRootPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PathReplyEntry{st}, err
}

func ReadRootPathReplyEntry(msg *capnp.Message) (PathReplyEntry, error) {
	root, err := msg.RootPtr()
	return PathReplyEntry{root.Struct()}, err
}

func (s PathReplyEntry) String() string {
	str, _ := text.Marshal(0xc5ff2e54709776ec, s.Struct)
	return str
}

func (s PathReplyEntry) Path() (FwdPathMeta, error) {
	p, err := s.Struct.Ptr(0)
	return FwdPathMeta{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPath(v FwdPathMeta) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPath sets the path field to a newly
// allocated FwdPathMeta struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPath() (FwdPathMeta, error) {
	ss, err := NewFwdPathMeta(s.Struct.Segment())
	if err != nil {
		return FwdPathMeta{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(1)
	return HostInfo{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s PathReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) PathStaticInfo() (PathMetadata, error) {
	p, err := s.Struct.Ptr(2)
	return PathMetadata{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPathStaticInfo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPathStaticInfo(v PathMetadata) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewPathStaticInfo sets the pathStaticInfo field to a newly
// allocated PathMetadata struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPathStaticInfo() (PathMetadata, error) {
	ss, err := NewPathMetadata(s.Struct.Segment())
	if err != nil {
		return PathMetadata{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// PathReplyEntry_List is a list of PathReplyEntry.
type PathReplyEntry_List struct{ capnp.List }

// NewPathReplyEntry creates a new list of PathReplyEntry.
func NewPathReplyEntry_List(s *capnp.Segment, sz int32) (PathReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return PathReplyEntry_List{l}, err
}

func (s PathReplyEntry_List) At(i int) PathReplyEntry { return PathReplyEntry{s.List.Struct(i)} }

func (s PathReplyEntry_List) Set(i int, v PathReplyEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xc5ff2e54709776ec, s.List)
	return str
}

// PathReplyEntry_Promise is a wrapper for a PathReplyEntry promised by a client call.
type PathReplyEntry_Promise struct{ *capnp.Pipeline }

func (p PathReplyEntry_Promise) Struct() (PathReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return PathReplyEntry{s}, err
}

func (p PathReplyEntry_Promise) Path() FwdPathMeta_Promise {
	return FwdPathMeta_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p PathReplyEntry_Promise) PathStaticInfo() PathMetadata_Promise {
	return PathMetadata_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type HostInfo struct{ capnp.Struct }
type HostInfo_addrs HostInfo

// HostInfo_TypeID is the unique identifier for the type HostInfo.
const HostInfo_TypeID = 0xb21a270577932520

func NewHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func NewRootHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func ReadRootHostInfo(msg *capnp.Message) (HostInfo, error) {
	root, err := msg.RootPtr()
	return HostInfo{root.Struct()}, err
}

func (s HostInfo) String() string {
	str, _ := text.Marshal(0xb21a270577932520, s.Struct)
	return str
}

func (s HostInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostInfo) Addrs() HostInfo_addrs { return HostInfo_addrs(s) }

func (s HostInfo_addrs) Ipv4() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv4() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv4(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s HostInfo_addrs) Ipv6() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv6() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv6(v []byte) error {
	return s.Struct.SetData(1, v)
}

// HostInfo_List is a list of HostInfo.
type HostInfo_List struct{ capnp.List }

// NewHostInfo creates a new list of HostInfo.
func NewHostInfo_List(s *capnp.Segment, sz int32) (HostInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return HostInfo_List{l}, err
}

func (s HostInfo_List) At(i int) HostInfo { return HostInfo{s.List.Struct(i)} }

func (s HostInfo_List) Set(i int, v HostInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s HostInfo_List) String() string {
	str, _ := text.MarshalList(0xb21a270577932520, s.List)
	return str
}

// HostInfo_Promise is a wrapper for a HostInfo promised by a client call.
type HostInfo_Promise struct{ *capnp.Pipeline }

func (p HostInfo_Promise) Struct() (HostInfo, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo{s}, err
}

func (p HostInfo_Promise) Addrs() HostInfo_addrs_Promise { return HostInfo_addrs_Promise{p.Pipeline} }

// HostInfo_addrs_Promise is a wrapper for a HostInfo_addrs promised by a client call.
type HostInfo_addrs_Promise struct{ *capnp.Pipeline }

func (p HostInfo_addrs_Promise) Struct() (HostInfo_addrs, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo_addrs{s}, err
}

type PathMetadata struct{ capnp.Struct }

// PathMetadata_TypeID is the unique identifier for the type PathMetadata.
const PathMetadata_TypeID = 0xa5cff7314a4335e5

func NewPathMetadata(s *capnp.Segment) (PathMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PathMetadata{st}, err
}

func NewRootPathMetadata(s *capnp.Segment) (PathMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PathMetadata{st}, err
}

func ReadRootPathMetadata(msg *capnp.Message) (PathMetadata, error) {
	root, err := msg.RootPtr()
	return PathMetadata{root.Struct()}, err
}

func (s PathMetadata) String() string {
	str, _ := text.Marshal(0xa5cff7314a4335e5, s.Struct)
	return str
}

func (s PathMetadata) TotalLatency() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathMetadata) SetTotalLatency(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathMetadata) TotalHops() uint8 {
	return s.Struct.Uint8(2)
}

func (s PathMetadata) SetTotalHops(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s PathMetadata) BandwidthBottleneck() uint32 {
	return s.Struct.Uint32(4)
}

func (s PathMetadata) SetBandwidthBottleneck(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s PathMetadata) LinkTypes() (PathMetadata_InterfaceLinkType_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathMetadata_InterfaceLinkType_List{List: p.List()}, err
}

func (s PathMetadata) HasLinkTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetLinkTypes(v PathMetadata_InterfaceLinkType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLinkTypes sets the linkTypes field to a newly
// allocated PathMetadata_InterfaceLinkType_List, preferring placement in s's segment.
func (s PathMetadata) NewLinkTypes(n int32) (PathMetadata_InterfaceLinkType_List, error) {
	l, err := NewPathMetadata_InterfaceLinkType_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_InterfaceLinkType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PathMetadata) AsLocations() (PathMetadata_Geo_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathMetadata_Geo_List{List: p.List()}, err
}

func (s PathMetadata) HasAsLocations() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetAsLocations(v PathMetadata_Geo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsLocations sets the asLocations field to a newly
// allocated PathMetadata_Geo_List, preferring placement in s's segment.
func (s PathMetadata) NewAsLocations(n int32) (PathMetadata_Geo_List, error) {
	l, err := NewPathMetadata_Geo_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Geo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s PathMetadata) Notes() (PathMetadata_Note_List, error) {
	p, err := s.Struct.Ptr(2)
	return PathMetadata_Note_List{List: p.List()}, err
}

func (s PathMetadata) HasNotes() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetNotes(v PathMetadata_Note_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewNotes sets the notes field to a newly
// allocated PathMetadata_Note_List, preferring placement in s's segment.
func (s PathMetadata) NewNotes(n int32) (PathMetadata_Note_List, error) {
	l, err := NewPathMetadata_Note_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Note_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// PathMetadata_List is a list of PathMetadata.
type PathMetadata_List struct{ capnp.List }

// NewPathMetadata creates a new list of PathMetadata.
func NewPathMetadata_List(s *capnp.Segment, sz int32) (PathMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return PathMetadata_List{l}, err
}

func (s PathMetadata_List) At(i int) PathMetadata { return PathMetadata{s.List.Struct(i)} }

func (s PathMetadata_List) Set(i int, v PathMetadata) error { return s.List.SetStruct(i, v.Struct) }

func (s PathMetadata_List) String() string {
	str, _ := text.MarshalList(0xa5cff7314a4335e5, s.List)
	return str
}

// PathMetadata_Promise is a wrapper for a PathMetadata promised by a client call.
type PathMetadata_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Promise) Struct() (PathMetadata, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata{s}, err
}

type PathMetadata_InterfaceLinkType struct{ capnp.Struct }

// PathMetadata_InterfaceLinkType_TypeID is the unique identifier for the type PathMetadata_InterfaceLinkType.
const PathMetadata_InterfaceLinkType_TypeID = 0xd7c92876b75c115d

func NewPathMetadata_InterfaceLinkType(s *capnp.Segment) (PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathMetadata_InterfaceLinkType{st}, err
}

func NewRootPathMetadata_InterfaceLinkType(s *capnp.Segment) (PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathMetadata_InterfaceLinkType{st}, err
}

func ReadRootPathMetadata_InterfaceLinkType(msg *capnp.Message) (PathMetadata_InterfaceLinkType, error) {
	root, err := msg.RootPtr()
	return PathMetadata_InterfaceLinkType{root.Struct()}, err
}

func (s PathMetadata_InterfaceLinkType) String() string {
	str, _ := text.Marshal(0xd7c92876b75c115d, s.Struct)
	return str
}

func (s PathMetadata_InterfaceLinkType) InterLinkType() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathMetadata_InterfaceLinkType) SetInterLinkType(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathMetadata_InterfaceLinkType) PeerLinkType() uint16 {
	return s.Struct.Uint16(2)
}

func (s PathMetadata_InterfaceLinkType) SetPeerLinkType(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s PathMetadata_InterfaceLinkType) Isdas() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathMetadata_InterfaceLinkType) SetIsdas(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathMetadata_InterfaceLinkType_List is a list of PathMetadata_InterfaceLinkType.
type PathMetadata_InterfaceLinkType_List struct{ capnp.List }

// NewPathMetadata_InterfaceLinkType creates a new list of PathMetadata_InterfaceLinkType.
func NewPathMetadata_InterfaceLinkType_List(s *capnp.Segment, sz int32) (PathMetadata_InterfaceLinkType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathMetadata_InterfaceLinkType_List{l}, err
}

func (s PathMetadata_InterfaceLinkType_List) At(i int) PathMetadata_InterfaceLinkType {
	return PathMetadata_InterfaceLinkType{s.List.Struct(i)}
}

func (s PathMetadata_InterfaceLinkType_List) Set(i int, v PathMetadata_InterfaceLinkType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_InterfaceLinkType_List) String() string {
	str, _ := text.MarshalList(0xd7c92876b75c115d, s.List)
	return str
}

// PathMetadata_InterfaceLinkType_Promise is a wrapper for a PathMetadata_InterfaceLinkType promised by a client call.
type PathMetadata_InterfaceLinkType_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_InterfaceLinkType_Promise) Struct() (PathMetadata_InterfaceLinkType, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_InterfaceLinkType{s}, err
}

type PathMetadata_Geo struct{ capnp.Struct }

// PathMetadata_Geo_TypeID is the unique identifier for the type PathMetadata_Geo.
const PathMetadata_Geo_TypeID = 0xb47c95e958cccfff

func NewPathMetadata_Geo(s *capnp.Segment) (PathMetadata_Geo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo{st}, err
}

func NewRootPathMetadata_Geo(s *capnp.Segment) (PathMetadata_Geo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo{st}, err
}

func ReadRootPathMetadata_Geo(msg *capnp.Message) (PathMetadata_Geo, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Geo{root.Struct()}, err
}

func (s PathMetadata_Geo) String() string {
	str, _ := text.Marshal(0xb47c95e958cccfff, s.Struct)
	return str
}

func (s PathMetadata_Geo) RouterLocations() (PathMetadata_Geo_GPSData_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathMetadata_Geo_GPSData_List{List: p.List()}, err
}

func (s PathMetadata_Geo) HasRouterLocations() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Geo) SetRouterLocations(v PathMetadata_Geo_GPSData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRouterLocations sets the routerLocations field to a newly
// allocated PathMetadata_Geo_GPSData_List, preferring placement in s's segment.
func (s PathMetadata_Geo) NewRouterLocations(n int32) (PathMetadata_Geo_GPSData_List, error) {
	l, err := NewPathMetadata_Geo_GPSData_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Geo_GPSData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PathMetadata_Geo) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathMetadata_Geo) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PathMetadata_Geo_List is a list of PathMetadata_Geo.
type PathMetadata_Geo_List struct{ capnp.List }

// NewPathMetadata_Geo creates a new list of PathMetadata_Geo.
func NewPathMetadata_Geo_List(s *capnp.Segment, sz int32) (PathMetadata_Geo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Geo_List{l}, err
}

func (s PathMetadata_Geo_List) At(i int) PathMetadata_Geo { return PathMetadata_Geo{s.List.Struct(i)} }

func (s PathMetadata_Geo_List) Set(i int, v PathMetadata_Geo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Geo_List) String() string {
	str, _ := text.MarshalList(0xb47c95e958cccfff, s.List)
	return str
}

// PathMetadata_Geo_Promise is a wrapper for a PathMetadata_Geo promised by a client call.
type PathMetadata_Geo_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Geo_Promise) Struct() (PathMetadata_Geo, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Geo{s}, err
}

type PathMetadata_Geo_GPSData struct{ capnp.Struct }

// PathMetadata_Geo_GPSData_TypeID is the unique identifier for the type PathMetadata_Geo_GPSData.
const PathMetadata_Geo_GPSData_TypeID = 0xb7cede732308e432

func NewPathMetadata_Geo_GPSData(s *capnp.Segment) (PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo_GPSData{st}, err
}

func NewRootPathMetadata_Geo_GPSData(s *capnp.Segment) (PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo_GPSData{st}, err
}

func ReadRootPathMetadata_Geo_GPSData(msg *capnp.Message) (PathMetadata_Geo_GPSData, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Geo_GPSData{root.Struct()}, err
}

func (s PathMetadata_Geo_GPSData) String() string {
	str, _ := text.Marshal(0xb7cede732308e432, s.Struct)
	return str
}

func (s PathMetadata_Geo_GPSData) Latitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s PathMetadata_Geo_GPSData) SetLatitude(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s PathMetadata_Geo_GPSData) Longitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s PathMetadata_Geo_GPSData) SetLongitude(v float32) {
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s PathMetadata_Geo_GPSData) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PathMetadata_Geo_GPSData) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Geo_GPSData) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PathMetadata_Geo_GPSData) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// PathMetadata_Geo_GPSData_List is a list of PathMetadata_Geo_GPSData.
type PathMetadata_Geo_GPSData_List struct{ capnp.List }

// NewPathMetadata_Geo_GPSData creates a new list of PathMetadata_Geo_GPSData.
func NewPathMetadata_Geo_GPSData_List(s *capnp.Segment, sz int32) (PathMetadata_Geo_GPSData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Geo_GPSData_List{l}, err
}

func (s PathMetadata_Geo_GPSData_List) At(i int) PathMetadata_Geo_GPSData {
	return PathMetadata_Geo_GPSData{s.List.Struct(i)}
}

func (s PathMetadata_Geo_GPSData_List) Set(i int, v PathMetadata_Geo_GPSData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Geo_GPSData_List) String() string {
	str, _ := text.MarshalList(0xb7cede732308e432, s.List)
	return str
}

// PathMetadata_Geo_GPSData_Promise is a wrapper for a PathMetadata_Geo_GPSData promised by a client call.
type PathMetadata_Geo_GPSData_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Geo_GPSData_Promise) Struct() (PathMetadata_Geo_GPSData, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Geo_GPSData{s}, err
}

type PathMetadata_Note struct{ capnp.Struct }

// PathMetadata_Note_TypeID is the unique identifier for the type PathMetadata_Note.
const PathMetadata_Note_TypeID = 0x88b4277fa83dde2d

func NewPathMetadata_Note(s *capnp.Segment) (PathMetadata_Note, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Note{st}, err
}

func NewRootPathMetadata_Note(s *capnp.Segment) (PathMetadata_Note, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Note{st}, err
}

func ReadRootPathMetadata_Note(msg *capnp.Message) (PathMetadata_Note, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Note{root.Struct()}, err
}

func (s PathMetadata_Note) String() string {
	str, _ := text.Marshal(0x88b4277fa83dde2d, s.Struct)
	return str
}

func (s PathMetadata_Note) Note() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PathMetadata_Note) HasNote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Note) NoteBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PathMetadata_Note) SetNote(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PathMetadata_Note) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathMetadata_Note) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PathMetadata_Note_List is a list of PathMetadata_Note.
type PathMetadata_Note_List struct{ capnp.List }

// NewPathMetadata_Note creates a new list of PathMetadata_Note.
func NewPathMetadata_Note_List(s *capnp.Segment, sz int32) (PathMetadata_Note_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Note_List{l}, err
}

func (s PathMetadata_Note_List) At(i int) PathMetadata_Note {
	return PathMetadata_Note{s.List.Struct(i)}
}

func (s PathMetadata_Note_List) Set(i int, v PathMetadata_Note) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Note_List) String() string {
	str, _ := text.MarshalList(0x88b4277fa83dde2d, s.List)
	return str
}

// PathMetadata_Note_Promise is a wrapper for a PathMetadata_Note promised by a client call.
type PathMetadata_Note_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Note_Promise) Struct() (PathMetadata_Note, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Note{s}, err
}

type FwdPathMeta struct{ capnp.Struct }

// FwdPathMeta_TypeID is the unique identifier for the type FwdPathMeta.
const FwdPathMeta_TypeID = 0x8adfcabe5ff9daf4

func NewFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func NewRootFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func ReadRootFwdPathMeta(msg *capnp.Message) (FwdPathMeta, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta{root.Struct()}, err
}

func (s FwdPathMeta) String() string {
	str, _ := text.Marshal(0x8adfcabe5ff9daf4, s.Struct)
	return str
}

func (s FwdPathMeta) FwdPath() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s FwdPathMeta) HasFwdPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetFwdPath(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s FwdPathMeta) Mtu() uint16 {
	return s.Struct.Uint16(0)
}

func (s FwdPathMeta) SetMtu(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s FwdPathMeta) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathInterface_List{List: p.List()}, err
}

func (s FwdPathMeta) HasInterfaces() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s FwdPathMeta) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s FwdPathMeta) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// FwdPathMeta_List is a list of FwdPathMeta.
type FwdPathMeta_List struct{ capnp.List }

// NewFwdPathMeta creates a new list of FwdPathMeta.
func NewFwdPathMeta_List(s *capnp.Segment, sz int32) (FwdPathMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FwdPathMeta_List{l}, err
}

func (s FwdPathMeta_List) At(i int) FwdPathMeta { return FwdPathMeta{s.List.Struct(i)} }

func (s FwdPathMeta_List) Set(i int, v FwdPathMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s FwdPathMeta_List) String() string {
	str, _ := text.MarshalList(0x8adfcabe5ff9daf4, s.List)
	return str
}

// FwdPathMeta_Promise is a wrapper for a FwdPathMeta promised by a client call.
type FwdPathMeta_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_Promise) Struct() (FwdPathMeta, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta{s}, err
}

type PathInterface struct{ capnp.Struct }

// PathInterface_TypeID is the unique identifier for the type PathInterface.
const PathInterface_TypeID = 0x95794035a80b7da1

func NewPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func NewRootPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func ReadRootPathInterface(msg *capnp.Message) (PathInterface, error) {
	root, err := msg.RootPtr()
	return PathInterface{root.Struct()}, err
}

func (s PathInterface) String() string {
	str, _ := text.Marshal(0x95794035a80b7da1, s.Struct)
	return str
}

func (s PathInterface) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathInterface) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathInterface) IfID() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathInterface) SetIfID(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathInterface_List is a list of PathInterface.
type PathInterface_List struct{ capnp.List }

// NewPathInterface creates a new list of PathInterface.
func NewPathInterface_List(s *capnp.Segment, sz int32) (PathInterface_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathInterface_List{l}, err
}

func (s PathInterface_List) At(i int) PathInterface { return PathInterface{s.List.Struct(i)} }

func (s PathInterface_List) Set(i int, v PathInterface) error { return s.List.SetStruct(i, v.Struct) }

func (s PathInterface_List) String() string {
	str, _ := text.MarshalList(0x95794035a80b7da1, s.List)
	return str
}

// PathInterface_Promise is a wrapper for a PathInterface promised by a client call.
type PathInterface_Promise struct{ *capnp.Pipeline }

func (p PathInterface_Promise) Struct() (PathInterface, error) {
	s, err := p.Pipeline.Struct()
	return PathInterface{s}, err
}

type ASInfoReq struct{ capnp.Struct }

// ASInfoReq_TypeID is the unique identifier for the type ASInfoReq.
const ASInfoReq_TypeID = 0xcc65a2a89c24e6a5

func NewASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func NewRootASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func ReadRootASInfoReq(msg *capnp.Message) (ASInfoReq, error) {
	root, err := msg.RootPtr()
	return ASInfoReq{root.Struct()}, err
}

func (s ASInfoReq) String() string {
	str, _ := text.Marshal(0xcc65a2a89c24e6a5, s.Struct)
	return str
}

func (s ASInfoReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ASInfoReq_List is a list of ASInfoReq.
type ASInfoReq_List struct{ capnp.List }

// NewASInfoReq creates a new list of ASInfoReq.
func NewASInfoReq_List(s *capnp.Segment, sz int32) (ASInfoReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ASInfoReq_List{l}, err
}

func (s ASInfoReq_List) At(i int) ASInfoReq { return ASInfoReq{s.List.Struct(i)} }

func (s ASInfoReq_List) Set(i int, v ASInfoReq) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReq_List) String() string {
	str, _ := text.MarshalList(0xcc65a2a89c24e6a5, s.List)
	return str
}

// ASInfoReq_Promise is a wrapper for a ASInfoReq promised by a client call.
type ASInfoReq_Promise struct{ *capnp.Pipeline }

func (p ASInfoReq_Promise) Struct() (ASInfoReq, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReq{s}, err
}

type ASInfoReply struct{ capnp.Struct }

// ASInfoReply_TypeID is the unique identifier for the type ASInfoReply.
const ASInfoReply_TypeID = 0x947e1828e214e89d

func NewASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func NewRootASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func ReadRootASInfoReply(msg *capnp.Message) (ASInfoReply, error) {
	root, err := msg.RootPtr()
	return ASInfoReply{root.Struct()}, err
}

func (s ASInfoReply) String() string {
	str, _ := text.Marshal(0x947e1828e214e89d, s.Struct)
	return str
}

func (s ASInfoReply) Entries() (ASInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ASInfoReplyEntry_List{List: p.List()}, err
}

func (s ASInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASInfoReply) SetEntries(v ASInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ASInfoReplyEntry_List, preferring placement in s's segment.
func (s ASInfoReply) NewEntries(n int32) (ASInfoReplyEntry_List, error) {
	l, err := NewASInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ASInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ASInfoReply_List is a list of ASInfoReply.
type ASInfoReply_List struct{ capnp.List }

// NewASInfoReply creates a new list of ASInfoReply.
func NewASInfoReply_List(s *capnp.Segment, sz int32) (ASInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ASInfoReply_List{l}, err
}

func (s ASInfoReply_List) At(i int) ASInfoReply { return ASInfoReply{s.List.Struct(i)} }

func (s ASInfoReply_List) Set(i int, v ASInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReply_List) String() string {
	str, _ := text.MarshalList(0x947e1828e214e89d, s.List)
	return str
}

// ASInfoReply_Promise is a wrapper for a ASInfoReply promised by a client call.
type ASInfoReply_Promise struct{ *capnp.Pipeline }

func (p ASInfoReply_Promise) Struct() (ASInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReply{s}, err
}

type ASInfoReplyEntry struct{ capnp.Struct }

// ASInfoReplyEntry_TypeID is the unique identifier for the type ASInfoReplyEntry.
const ASInfoReplyEntry_TypeID = 0xfab1a3b4477ab6b3

func NewASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func NewRootASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func ReadRootASInfoReplyEntry(msg *capnp.Message) (ASInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ASInfoReplyEntry{root.Struct()}, err
}

func (s ASInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xfab1a3b4477ab6b3, s.Struct)
	return str
}

func (s ASInfoReplyEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReplyEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASInfoReplyEntry) Mtu() uint16 {
	return s.Struct.Uint16(8)
}

func (s ASInfoReplyEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s ASInfoReplyEntry) IsCore() bool {
	return s.Struct.Bit(80)
}

func (s ASInfoReplyEntry) SetIsCore(v bool) {
	s.Struct.SetBit(80, v)
}

// ASInfoReplyEntry_List is a list of ASInfoReplyEntry.
type ASInfoReplyEntry_List struct{ capnp.List }

// NewASInfoReplyEntry creates a new list of ASInfoReplyEntry.
func NewASInfoReplyEntry_List(s *capnp.Segment, sz int32) (ASInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ASInfoReplyEntry_List{l}, err
}

func (s ASInfoReplyEntry_List) At(i int) ASInfoReplyEntry { return ASInfoReplyEntry{s.List.Struct(i)} }

func (s ASInfoReplyEntry_List) Set(i int, v ASInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ASInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xfab1a3b4477ab6b3, s.List)
	return str
}

// ASInfoReplyEntry_Promise is a wrapper for a ASInfoReplyEntry promised by a client call.
type ASInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ASInfoReplyEntry_Promise) Struct() (ASInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReplyEntry{s}, err
}

type RevNotification struct{ capnp.Struct }

// RevNotification_TypeID is the unique identifier for the type RevNotification.
const RevNotification_TypeID = 0x9b0685a785df42e9

func NewRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func NewRootRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func ReadRootRevNotification(msg *capnp.Message) (RevNotification, error) {
	root, err := msg.RootPtr()
	return RevNotification{root.Struct()}, err
}

func (s RevNotification) String() string {
	str, _ := text.Marshal(0x9b0685a785df42e9, s.Struct)
	return str
}

func (s RevNotification) SRevInfo() (SignedBlob, error) {
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s RevNotification) HasSRevInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RevNotification) SetSRevInfo(v SignedBlob) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s RevNotification) NewSRevInfo() (SignedBlob, error) {
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RevNotification_List is a list of RevNotification.
type RevNotification_List struct{ capnp.List }

// NewRevNotification creates a new list of RevNotification.
func NewRevNotification_List(s *capnp.Segment, sz int32) (RevNotification_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RevNotification_List{l}, err
}

func (s RevNotification_List) At(i int) RevNotification { return RevNotification{s.List.Struct(i)} }

func (s RevNotification_List) Set(i int, v RevNotification) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RevNotification_List) String() string {
	str, _ := text.MarshalList(0x9b0685a785df42e9, s.List)
	return str
}

// RevNotification_Promise is a wrapper for a RevNotification promised by a client call.
type RevNotification_Promise struct{ *capnp.Pipeline }

func (p RevNotification_Promise) Struct() (RevNotification, error) {
	s, err := p.Pipeline.Struct()
	return RevNotification{s}, err
}

func (p RevNotification_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RevReply struct{ capnp.Struct }

// RevReply_TypeID is the unique identifier for the type RevReply.
const RevReply_TypeID = 0x8f8172e4469c111a

func NewRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func NewRootRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func ReadRootRevReply(msg *capnp.Message) (RevReply, error) {
	root, err := msg.RootPtr()
	return RevReply{root.Struct()}, err
}

func (s RevReply) String() string {
	str, _ := text.Marshal(0x8f8172e4469c111a, s.Struct)
	return str
}

func (s RevReply) Result() uint16 {
	return s.Struct.Uint16(0)
}

func (s RevReply) SetResult(v uint16) {
	s.Struct.SetUint16(0, v)
}

// RevReply_List is a list of RevReply.
type RevReply_List struct{ capnp.List }

// NewRevReply creates a new list of RevReply.
func NewRevReply_List(s *capnp.Segment, sz int32) (RevReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RevReply_List{l}, err
}

func (s RevReply_List) At(i int) RevReply { return RevReply{s.List.Struct(i)} }

func (s RevReply_List) Set(i int, v RevReply) error { return s.List.SetStruct(i, v.Struct) }

func (s RevReply_List) String() string {
	str, _ := text.MarshalList(0x8f8172e4469c111a, s.List)
	return str
}

// RevReply_Promise is a wrapper for a RevReply promised by a client call.
type RevReply_Promise struct{ *capnp.Pipeline }

func (p RevReply_Promise) Struct() (RevReply, error) {
	s, err := p.Pipeline.Struct()
	return RevReply{s}, err
}

type IFInfoRequest struct{ capnp.Struct }

// IFInfoRequest_TypeID is the unique identifier for the type IFInfoRequest.
const IFInfoRequest_TypeID = 0x877af4eba6adb0f3

func NewIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func NewRootIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func ReadRootIFInfoRequest(msg *capnp.Message) (IFInfoRequest, error) {
	root, err := msg.RootPtr()
	return IFInfoRequest{root.Struct()}, err
}

func (s IFInfoRequest) String() string {
	str, _ := text.Marshal(0x877af4eba6adb0f3, s.Struct)
	return str
}

func (s IFInfoRequest) IfIDs() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s IFInfoRequest) HasIfIDs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoRequest) SetIfIDs(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIfIDs sets the ifIDs field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s IFInfoRequest) NewIfIDs(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoRequest_List is a list of IFInfoRequest.
type IFInfoRequest_List struct{ capnp.List }

// NewIFInfoRequest creates a new list of IFInfoRequest.
func NewIFInfoRequest_List(s *capnp.Segment, sz int32) (IFInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoRequest_List{l}, err
}

func (s IFInfoRequest_List) At(i int) IFInfoRequest { return IFInfoRequest{s.List.Struct(i)} }

func (s IFInfoRequest_List) Set(i int, v IFInfoRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoRequest_List) String() string {
	str, _ := text.MarshalList(0x877af4eba6adb0f3, s.List)
	return str
}

// IFInfoRequest_Promise is a wrapper for a IFInfoRequest promised by a client call.
type IFInfoRequest_Promise struct{ *capnp.Pipeline }

func (p IFInfoRequest_Promise) Struct() (IFInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoRequest{s}, err
}

type IFInfoReply struct{ capnp.Struct }

// IFInfoReply_TypeID is the unique identifier for the type IFInfoReply.
const IFInfoReply_TypeID = 0xe7f7d11a5652e06c

func NewIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func NewRootIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func ReadRootIFInfoReply(msg *capnp.Message) (IFInfoReply, error) {
	root, err := msg.RootPtr()
	return IFInfoReply{root.Struct()}, err
}

func (s IFInfoReply) String() string {
	str, _ := text.Marshal(0xe7f7d11a5652e06c, s.Struct)
	return str
}

func (s IFInfoReply) Entries() (IFInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return IFInfoReplyEntry_List{List: p.List()}, err
}

func (s IFInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReply) SetEntries(v IFInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated IFInfoReplyEntry_List, preferring placement in s's segment.
func (s IFInfoReply) NewEntries(n int32) (IFInfoReplyEntry_List, error) {
	l, err := NewIFInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return IFInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoReply_List is a list of IFInfoReply.
type IFInfoReply_List struct{ capnp.List }

// NewIFInfoReply creates a new list of IFInfoReply.
func NewIFInfoReply_List(s *capnp.Segment, sz int32) (IFInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoReply_List{l}, err
}

func (s IFInfoReply_List) At(i int) IFInfoReply { return IFInfoReply{s.List.Struct(i)} }

func (s IFInfoReply_List) Set(i int, v IFInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoReply_List) String() string {
	str, _ := text.MarshalList(0xe7f7d11a5652e06c, s.List)
	return str
}

// IFInfoReply_Promise is a wrapper for a IFInfoReply promised by a client call.
type IFInfoReply_Promise struct{ *capnp.Pipeline }

func (p IFInfoReply_Promise) Struct() (IFInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReply{s}, err
}

type IFInfoReplyEntry struct{ capnp.Struct }

// IFInfoReplyEntry_TypeID is the unique identifier for the type IFInfoReplyEntry.
const IFInfoReplyEntry_TypeID = 0xf0c5156786d72738

func NewIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func NewRootIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func ReadRootIFInfoReplyEntry(msg *capnp.Message) (IFInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return IFInfoReplyEntry{root.Struct()}, err
}

func (s IFInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xf0c5156786d72738, s.Struct)
	return str
}

func (s IFInfoReplyEntry) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFInfoReplyEntry) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IFInfoReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo{Struct: p.Struct()}, err
}

func (s IFInfoReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s IFInfoReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IFInfoReplyEntry_List is a list of IFInfoReplyEntry.
type IFInfoReplyEntry_List struct{ capnp.List }

// NewIFInfoReplyEntry creates a new list of IFInfoReplyEntry.
func NewIFInfoReplyEntry_List(s *capnp.Segment, sz int32) (IFInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IFInfoReplyEntry_List{l}, err
}

func (s IFInfoReplyEntry_List) At(i int) IFInfoReplyEntry { return IFInfoReplyEntry{s.List.Struct(i)} }

func (s IFInfoReplyEntry_List) Set(i int, v IFInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IFInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xf0c5156786d72738, s.List)
	return str
}

// IFInfoReplyEntry_Promise is a wrapper for a IFInfoReplyEntry promised by a client call.
type IFInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p IFInfoReplyEntry_Promise) Struct() (IFInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReplyEntry{s}, err
}

func (p IFInfoReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ServiceInfoRequest struct{ capnp.Struct }

// ServiceInfoRequest_TypeID is the unique identifier for the type ServiceInfoRequest.
const ServiceInfoRequest_TypeID = 0xa94f085c31a03112

func NewServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func NewRootServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func ReadRootServiceInfoRequest(msg *capnp.Message) (ServiceInfoRequest, error) {
	root, err := msg.RootPtr()
	return ServiceInfoRequest{root.Struct()}, err
}

func (s ServiceInfoRequest) String() string {
	str, _ := text.Marshal(0xa94f085c31a03112, s.Struct)
	return str
}

func (s ServiceInfoRequest) ServiceTypes() (ServiceType_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceType_List{List: p.List()}, err
}

func (s ServiceInfoRequest) HasServiceTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoRequest) SetServiceTypes(v ServiceType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewServiceTypes sets the serviceTypes field to a newly
// allocated ServiceType_List, preferring placement in s's segment.
func (s ServiceInfoRequest) NewServiceTypes(n int32) (ServiceType_List, error) {
	l, err := NewServiceType_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoRequest_List is a list of ServiceInfoRequest.
type ServiceInfoRequest_List struct{ capnp.List }

// NewServiceInfoRequest creates a new list of ServiceInfoRequest.
func NewServiceInfoRequest_List(s *capnp.Segment, sz int32) (ServiceInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoRequest_List{l}, err
}

func (s ServiceInfoRequest_List) At(i int) ServiceInfoRequest {
	return ServiceInfoRequest{s.List.Struct(i)}
}

func (s ServiceInfoRequest_List) Set(i int, v ServiceInfoRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoRequest_List) String() string {
	str, _ := text.MarshalList(0xa94f085c31a03112, s.List)
	return str
}

// ServiceInfoRequest_Promise is a wrapper for a ServiceInfoRequest promised by a client call.
type ServiceInfoRequest_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoRequest_Promise) Struct() (ServiceInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoRequest{s}, err
}

type ServiceInfoReply struct{ capnp.Struct }

// ServiceInfoReply_TypeID is the unique identifier for the type ServiceInfoReply.
const ServiceInfoReply_TypeID = 0xf7a6d78ba978beb9

func NewServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func NewRootServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func ReadRootServiceInfoReply(msg *capnp.Message) (ServiceInfoReply, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReply{root.Struct()}, err
}

func (s ServiceInfoReply) String() string {
	str, _ := text.Marshal(0xf7a6d78ba978beb9, s.Struct)
	return str
}

func (s ServiceInfoReply) Entries() (ServiceInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReplyEntry_List{List: p.List()}, err
}

func (s ServiceInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReply) SetEntries(v ServiceInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ServiceInfoReplyEntry_List, preferring placement in s's segment.
func (s ServiceInfoReply) NewEntries(n int32) (ServiceInfoReplyEntry_List, error) {
	l, err := NewServiceInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReply_List is a list of ServiceInfoReply.
type ServiceInfoReply_List struct{ capnp.List }

// NewServiceInfoReply creates a new list of ServiceInfoReply.
func NewServiceInfoReply_List(s *capnp.Segment, sz int32) (ServiceInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoReply_List{l}, err
}

func (s ServiceInfoReply_List) At(i int) ServiceInfoReply { return ServiceInfoReply{s.List.Struct(i)} }

func (s ServiceInfoReply_List) Set(i int, v ServiceInfoReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReply_List) String() string {
	str, _ := text.MarshalList(0xf7a6d78ba978beb9, s.List)
	return str
}

// ServiceInfoReply_Promise is a wrapper for a ServiceInfoReply promised by a client call.
type ServiceInfoReply_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReply_Promise) Struct() (ServiceInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReply{s}, err
}

type ServiceInfoReplyEntry struct{ capnp.Struct }

// ServiceInfoReplyEntry_TypeID is the unique identifier for the type ServiceInfoReplyEntry.
const ServiceInfoReplyEntry_TypeID = 0xe7279389a6bbe1dc

func NewServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func NewRootServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func ReadRootServiceInfoReplyEntry(msg *capnp.Message) (ServiceInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReplyEntry{root.Struct()}, err
}

func (s ServiceInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xe7279389a6bbe1dc, s.Struct)
	return str
}

func (s ServiceInfoReplyEntry) ServiceType() ServiceType {
	return ServiceType(s.Struct.Uint16(0))
}

func (s ServiceInfoReplyEntry) SetServiceType(v ServiceType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s ServiceInfoReplyEntry) Ttl() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfoReplyEntry) SetTtl(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ServiceInfoReplyEntry) HostInfos() (HostInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo_List{List: p.List()}, err
}

func (s ServiceInfoReplyEntry) HasHostInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReplyEntry) SetHostInfos(v HostInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHostInfos sets the hostInfos field to a newly
// allocated HostInfo_List, preferring placement in s's segment.
func (s ServiceInfoReplyEntry) NewHostInfos(n int32) (HostInfo_List, error) {
	l, err := NewHostInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return HostInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReplyEntry_List is a list of ServiceInfoReplyEntry.
type ServiceInfoReplyEntry_List struct{ capnp.List }

// NewServiceInfoReplyEntry creates a new list of ServiceInfoReplyEntry.
func NewServiceInfoReplyEntry_List(s *capnp.Segment, sz int32) (ServiceInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfoReplyEntry_List{l}, err
}

func (s ServiceInfoReplyEntry_List) At(i int) ServiceInfoReplyEntry {
	return ServiceInfoReplyEntry{s.List.Struct(i)}
}

func (s ServiceInfoReplyEntry_List) Set(i int, v ServiceInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xe7279389a6bbe1dc, s.List)
	return str
}

// ServiceInfoReplyEntry_Promise is a wrapper for a ServiceInfoReplyEntry promised by a client call.
type ServiceInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReplyEntry_Promise) Struct() (ServiceInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReplyEntry{s}, err
}

type SegTypeHopReq struct{ capnp.Struct }

// SegTypeHopReq_TypeID is the unique identifier for the type SegTypeHopReq.
const SegTypeHopReq_TypeID = 0xca1e844241cf650f

func NewSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func NewRootSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func ReadRootSegTypeHopReq(msg *capnp.Message) (SegTypeHopReq, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReq{root.Struct()}, err
}

func (s SegTypeHopReq) String() string {
	str, _ := text.Marshal(0xca1e844241cf650f, s.Struct)
	return str
}

func (s SegTypeHopReq) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s SegTypeHopReq) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// SegTypeHopReq_List is a list of SegTypeHopReq.
type SegTypeHopReq_List struct{ capnp.List }

// NewSegTypeHopReq creates a new list of SegTypeHopReq.
func NewSegTypeHopReq_List(s *capnp.Segment, sz int32) (SegTypeHopReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegTypeHopReq_List{l}, err
}

func (s SegTypeHopReq_List) At(i int) SegTypeHopReq { return SegTypeHopReq{s.List.Struct(i)} }

func (s SegTypeHopReq_List) Set(i int, v SegTypeHopReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegTypeHopReq_List) String() string {
	str, _ := text.MarshalList(0xca1e844241cf650f, s.List)
	return str
}

// SegTypeHopReq_Promise is a wrapper for a SegTypeHopReq promised by a client call.
type SegTypeHopReq_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReq_Promise) Struct() (SegTypeHopReq, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReq{s}, err
}

type SegTypeHopReply struct{ capnp.Struct }

// SegTypeHopReply_TypeID is the unique identifier for the type SegTypeHopReply.
const SegTypeHopReply_TypeID = 0xc340ede57616f2e8

func NewSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func NewRootSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func ReadRootSegTypeHopReply(msg *capnp.Message) (SegTypeHopReply, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReply{root.Struct()}, err
}

func (s SegTypeHopReply) String() string {
	str, _ := text.Marshal(0xc340ede57616f2e8, s.Struct)
	return str
}

func (s SegTypeHopReply) Entries() (SegTypeHopReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReplyEntry_List{List: p.List()}, err
}

func (s SegTypeHopReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReply) SetEntries(v SegTypeHopReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated SegTypeHopReplyEntry_List, preferring placement in s's segment.
func (s SegTypeHopReply) NewEntries(n int32) (SegTypeHopReplyEntry_List, error) {
	l, err := NewSegTypeHopReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return SegTypeHopReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegTypeHopReply_List is a list of SegTypeHopReply.
type SegTypeHopReply_List struct{ capnp.List }

// NewSegTypeHopReply creates a new list of SegTypeHopReply.
func NewSegTypeHopReply_List(s *capnp.Segment, sz int32) (SegTypeHopReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegTypeHopReply_List{l}, err
}

func (s SegTypeHopReply_List) At(i int) SegTypeHopReply { return SegTypeHopReply{s.List.Struct(i)} }

func (s SegTypeHopReply_List) Set(i int, v SegTypeHopReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReply_List) String() string {
	str, _ := text.MarshalList(0xc340ede57616f2e8, s.List)
	return str
}

// SegTypeHopReply_Promise is a wrapper for a SegTypeHopReply promised by a client call.
type SegTypeHopReply_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReply_Promise) Struct() (SegTypeHopReply, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReply{s}, err
}

type SegTypeHopReplyEntry struct{ capnp.Struct }

// SegTypeHopReplyEntry_TypeID is the unique identifier for the type SegTypeHopReplyEntry.
const SegTypeHopReplyEntry_TypeID = 0xacf8185a51a9f1b4

func NewSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func NewRootSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func ReadRootSegTypeHopReplyEntry(msg *capnp.Message) (SegTypeHopReplyEntry, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReplyEntry{root.Struct()}, err
}

func (s SegTypeHopReplyEntry) String() string {
	str, _ := text.Marshal(0xacf8185a51a9f1b4, s.Struct)
	return str
}

func (s SegTypeHopReplyEntry) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathInterface_List{List: p.List()}, err
}

func (s SegTypeHopReplyEntry) HasInterfaces() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReplyEntry) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s SegTypeHopReplyEntry) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegTypeHopReplyEntry) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s SegTypeHopReplyEntry) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SegTypeHopReplyEntry) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s SegTypeHopReplyEntry) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// SegTypeHopReplyEntry_List is a list of SegTypeHopReplyEntry.
type SegTypeHopReplyEntry_List struct{ capnp.List }

// NewSegTypeHopReplyEntry creates a new list of SegTypeHopReplyEntry.
func NewSegTypeHopReplyEntry_List(s *capnp.Segment, sz int32) (SegTypeHopReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegTypeHopReplyEntry_List{l}, err
}

func (s SegTypeHopReplyEntry_List) At(i int) SegTypeHopReplyEntry {
	return SegTypeHopReplyEntry{s.List.Struct(i)}
}

func (s SegTypeHopReplyEntry_List) Set(i int, v SegTypeHopReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xacf8185a51a9f1b4, s.List)
	return str
}

// SegTypeHopReplyEntry_Promise is a wrapper for a SegTypeHopReplyEntry promised by a client call.
type SegTypeHopReplyEntry_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReplyEntry_Promise) Struct() (SegTypeHopReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReplyEntry{s}, err
}

const schema_8f4bd412642c9517 = "x\xda\x94X}l\x1c\xe5\xd1\x9fy\xf6|\xe78>" +
	"\xdfmv\x0d\x91_\xbd\\\x9b\x82\xf2!ba\x87\x14" +
	"\x14\x01\x8e\x9d\xcfKm\xf0s\x97\xb4\x80\x12\x95\xcd\xdd" +
	"c\xfb\xe0|w\xb9];9\x04u\x83HKi+" +
	"\xa0\x10\x15\x0aQ\x13 \x10\xb7\x89J\xa8\xf9J[T" +
	"\x04iK\x94\xf2QQ\xa1F\x14BJ \x01*\x91" +
	"\x10\x1a\x9c\x86n5\xbb{\xbb\x9b\xf59\xa1\xff\xed\xed" +
	"\xcc\xce3\xf3\x9b\x99\xdf\xccs\x97\xdc\x1b^\xc8\xda\xea" +
	"\x1e\x9f\x02\xc0Kua\xf3\xd3'v=\xf6\xd1\x89\x9b" +
	"\xbf\x0fr\x14\xcd\xf37_\x9c\x9d\xf6\xc67\xee\x82:" +
	"\x8c\x00(\xcf\x85\x0e({C\xf4\xf4B\xa8\x03\xd0\x9c" +
	"\xfb\xf6\x95;Ff\x8e\xdd\x01\xbc\x05\xd1<<\x7f\xd1" +
	"\x8a\xb6\x93\xafnw\x94\x8f\x85N)_X\xca\xe3\xa1" +
	"\xf5\x80\xe6\x89\x03\xe3\xdf~~\xdf;w\x02\x8f\xa2\xdf" +
	"2#\x95Uu\xfb\x14\xad\x8e\x9e\xd6\xd4}\x00h\xb6" +
	"\xc8\x0f-}\xaf\xbc\xf1\xae\x80\xb2enI\xf8I\xa5" +
	"'LO\xc90y\xb1\xf4\xc5\xa5#c\x0f~x\x0f" +
	"\xe92Ow\x09\x8bD1\xa4\xe4\xc2{\x94u\xa4=" +
	"o0|\x8d\x04hn9\xa2\x1e\x9a5\xfd;\xf7\xd5" +
	"\x0apJ\xc3>\xa5\xb9\x81\x9e\xe4\x062\xbd\xed\xd6\xa9" +
	";\xe6/\xacl\x0e\x98\xb6\xdc\xe8l8\xa0\xf4X\xba" +
	"\xc9\x06\x8a\xefh\xd7;\x9b\x1e\xdf\x14~\xb0\x96\xdd\xed" +
	"\x0d\x1f*\xbb-\xdd]\x96\xdd\x03\x7f\xbb\xf3\xc8\xbbu" +
	"\xaf<\x08\xbc\x19%\xf3\xa3G^z\xab\xad\xf9\x0f/" +
	"A3F\x10@y\xbd\xe1\x00\xa0\xf2W\xcb\xaa\x0bj" +
	"\x005\x89\x8c\xb5M\xfd\x8br\xe5\xd4\xcb\x00\xe6\x89\xa9" +
	"\xdfB@sZ\xdb\xd6\xb6\xd5\xf5\xd7\x8c\xd6\xf0a\xde" +
	"x#C\xa5.J\xdfa\x94\x9c\x18;6\xca\xaf\x9f" +
	"\xfe\xf9\xce\xa0iK{~t\x1a*K,\xed\xce\xe8" +
	"\xaf\x00\xcd\xaf\\t\xef\xfa\xba\x99-O\xd6L\xdf\xb1" +
	"\xe8\x93\xca\xb8\xa5\xfcY\x94\xbc6_\xdd\x7f\xed\xd1\xcd" +
	"\xb7\x8c\xd5,\x8c\xf9M\xc7\x95\xce\xa6\xf3\x09\xb8&R" +
	"n\x7f\xaf\xfek\xfa\xdb\xaf<\x03\xfc\x02\xf4}j\xfb" +
	"\xf1\\S;*/7\xd1w{\x9b\xc8\x8f#\xc7\xcf" +
	"\x1b>\xfc\xcf\x85/\xd6\x82Y\xc4>T\xd6\xc5\xe8i" +
	"0F\x11\xba\xc0\xf2(JA\xe5-\xb1_(\xdbI" +
	"y\xde\xb6X\x82\xc0\xfbx\xf8\xa7\xa5\x95\xad\xe6\xde\x80" +
	"e\x0b\xe9\xd1\xf8!\xe5\xa98=\xed\x8e\x93\x171\xf1" +
	"jg\xd7\xed\x17\xec\xabU\x9f\\>\xa0\xac\x91\xe9\xe9" +
	":\x99\xbc\xd8\xfe\xfe\x85\x0f\xedxX\xec\xaf\xa5[\x91" +
	"\xf7(\x1b-\xdd[-\xdd5\xf2\xeag\x86g\xbd\xfc" +
	"&\x01\xc7<\xe0Hw\xde\x16y-*\xbb-\xe5]" +
	"29\xf1\xd6\xbb\xbfy\xec\x07\xf7\xce\xfc\xa0f\x02{" +
	"\xa6\xb5\xa0\xb2f\x9a\xe5\xc64\xd2\xce\x1fL}\xb3\xe5" +
	"\xf5\x93\x1f\xd4\xac{e\x9f\xd2\xacXu\xaf\x90\x1b\x97" +
	"\xcf|\xf3{\xfd\xcd{?\xa9eY\xe9T\x8e+=" +
	"\x96rR\xa1\xfcu\xbc\x7f\xd5\xec\xa7\x8f\xc6\x8e\xd5T" +
	"\x1eU\xf6(\xbb-\xe5]\x96\xf2s\xcfo\x18\xfd\xe1" +
	"\x9b\x8f\x9d\xac\xe5\xc5\xff\xab\xc7\x95\xd9*=]\xa4\x92" +
	"\x17\x8d-o\xff\xb2\xff\xa2\xc3\xe3\xc0\xcfC_\x016" +
	"3\xabKV\xa9\x87\x00\x95\xebT\xb2\xfa\xeb\xa7o^" +
	"6\xf6\xc8\xeeS\xb5\xfa\xf4)\xf5\xb8\xf2\x82e\xf5w" +
	"*\xe1\xa0gr\xc5B\xb65\xc3\xb4R\xa1\xb4 \xb9" +
	"4Y\xe8+\xa6\xc4\xba!!\xe9F/\"\x0fI!" +
	"\x80\x10\x02\xc8\xd1v\x00^/!\xbf\x90a\"\xd7\x97" +
	"\\\xacc\x13`\xaf\x848\x05\x18=\x06l\xf5j\xc6" +
	"@\x8f0\xb4\xacfth\xadW\x17\x0dA\xf6\xea]" +
	"{\xb3\xe7\x00\xf0\x0b%\xe4\x970DT\x91\xde\xcd\xa5" +
	"3fI\xc8/e\x18+\x14\x0d\x81\x8d\xc0\xb0\x110" +
	"\x91\xd3\xb3\x9an\x9d4e\xc2IK\xd7g\xab\x87\x01" +
	"\xd0!q\xf7\x10\xad\x0b\x80\xaf\x96\x90\x0fx\x87\x88\x19" +
	"\x00\xfc\x06\x09y\x9e\xa1\xccPE\x06 \xe7\xae\x07\xe0" +
	"\x03\x12\xf2\xdb\x19\xca\x12\xaa(\x01\xc8\x1b\xe9\xeb[$" +
	"\xe4w0\x1c\xe9\xb3O\xc1(0\x8c\x02F\x06\x8d!" +
	"\x8c\x00\xc3\x08\xa0\x99+\x18\xa2\xdc\xa7e@\x12.*" +
	"q\x8f/\x01\xe9\xe5\x88\xd8PZ\x99\x1b\x14X\x0f\x0c" +
	"\xeb}Q\xa0\x15EJ\x0c'R\xa2\x94\xaf\x04`_" +
	"\xe0\xc0\xae2\xec(\x0b}(o\xb8\xc7\x9ei \xbd" +
	"(\xd9q\xcd\xd5\x8b{\xf4~\xb2pE\xd5\x82\xb2\x19" +
	"[\x00\xd2w\xa3\x84\xe9\x87\x90a\x14M\xd3\x02By" +
	"\x00\xdb\x01\xd2\xf7\x91`+\x09\xd8\x7fL\x0b\x0ce\x0b" +
	"v\x01\xa4\xef'\xc1\xa3$\x90\xbe0-@\x94m\x98" +
	"\x02Ho%\xc1N\x12\x84N\x9b*\x86\xa8\xb0-\xc1" +
	"\x0e\x12\x8c\x91\xa0\xee\xdf\xa6\x8auD\x10\xb8\x16 \xfd" +
	"\x04\x09~K\x82\xf0)S\xc50MO\xbc\x0d \xfd" +
	",\x09^\"Ad\xdcT\xad\xba\x7f\x01\xcb\x00\xe9\xdf" +
	"\x93`?\x09\xea?7U\xac\x07P^\xb6L\xfd\x89" +
	"\x04o\x90`\xcaIS\xc5)4!\xf0g\x00\xe97" +
	"Hp\x90\x04\x0d\xff2Ul\x00P\xfe\x8ew\x02\xa4" +
	"\x0f\x92\xe0c\x12L\xfd\xccTq*\x80r\x14W\x00" +
	"\xa4\x8f\x90\xe0\x04\x09\x1aO\x98*6\x12u[\x87\x7f" +
	"B\x82\xd3$\x88~j\xaa\x18\xa5\xa9m\xb9\xfb9\x09" +
	"B\x8c\xa1\xdc\x84*6\xd1\xf0`\x04\xd5iz_\xcf" +
	"\x18J\xb9l\xb5H\x13C\x05]\x18\x10\x1e)i\xc6" +
	"@J\xac\xc3\xb8\xc7\xc0\x80\x18\x074mI)\x0fX" +
	"\xc1\xb8\xc7\x1c\x8eT\xd3\xedf\x04\xa4o]\xde\x0cJ" +
	"#\xa5<}\xed\x0erG^\x16\xc3W\x17\x8d\\\x1f" +
	"\xe62\x9a\x91+\x16\x00\xe3\xdePvtr}\x8e\x8d" +
	"\xc4\xba!\xa1\x1b\x18\xf7\xf6\x9d\xa0\x86s\x8aK\x9b\x8e" +
	"\\\x17\xe5\xe1\\F$\xd1G\x1b\x18\xf7&oM\xb5" +
	"R\xbe\x02\xe4\x8e\xcb~\x9e\xcb\x8e\x90\xa4\xee\xd2\xe3\xda" +
	"\xe8_Y)\x89\xe5\x90(\x96l8\xdd\xb1\x13\xd0@" +
	"R ;\x18\xf7\x06\xa4\xad3b\x94\xb5\x8cHf\xab" +
	"]\x1c`\x92\xcet\xd2\xf30\xd0\x87]\x1e\xfd\x8d\x88" +
	"\x82Q\xce\xf9[\xdd\xa5\\\xbb\xd5kPa\xd2\xa6\x08" +
	")\x13\xa4\xc1v\x8f\x06e\x97\x07\xe7x<x&\xf5" +
	"\xc5\x88y'\xe1\xc1\x94\x93\xf2\\F\x8bQ\xca\x03\x01" +
	"\xac\x00\xe0\x8d\x12\xf2\xe9\x0cM=%\x86)T\x1b\xea" +
	"\xd4?N]\xb6iY\xfb\xcf] 'x\x9f\x12\xeb" +
	"Z\xfb\xf2\x9a\xd4\xaf\x93\xeb\xf1\xbbm~\x9c\xdd\xe5\xf7" +
	"\xfd\x1e\x8b\x0a\xe4\xb9\x0b<\xdfG\xca\xa2\xaf,\xf4\x01" +
	"D`\x88\x80\x1d\x03\xb9lV\x14\xaa?'\x9f\x18\xa8" +
	"\xf1F\xf4-\x00\xb2\xfc\x13o\x17\x92\x9bgx\xcb\xb6" +
	",\xcf1\x1dl3(\xbas\x85\x9bVVJ(\"" +
	"\xcbD1FC\x87Ow\x11x\xe0F\x00~\xbf\x84" +
	"\xfcQr\x97\xd9PoK\x01\xf0\xad\x12\xf2\x9d\xbei" +
	"0\xfa0\x00\xdf)!\x7f\x96!Jv\xb0O\x91\xe2" +
	"\x98\x84\xfc5\x86r\x08\xed`\xff\xbc\x16\x80\xef\x97\x90" +
	"\x1fa(\xd71\x8b\xf3\xe4\xc3\x94\xd2\x83\x12\xf2\xd3\x0c" +
	"M\xa3hh\xf9n\xcd\x80\x98(d*.u[\xaf" +
	"\x97\x17K\x80:\x86\x81a\x18\xd0\\\xab\x15\xb2\xebs" +
	"Y\x03\x07\xba\x8a\x86\x91\x17\x85\x88\xc8\xdc\xe4N\x8b\xbc" +
	"\x1d\x9a\xa0/\xdc\xbas\x01r\xeaN\xd3\xbb\x8b\xd4\xef" +
	"\x10)\x16|j.t\xb6Z\x82F\xabO\xec\x82\x19" +
	"\xa8^\xc9\x9e+N\xf3V[\\7\x82\xadq\xa3S" +
	"Y\xb3\x98\xdb\xea+!V)yg\xc4L\xa3\xff\xb5" +
	"\xff\x9b=7uh\xb23\xec\xd6u:wI\xc1(" +
	"\xa35\x08\x1b\xddS\x96\xd0\x84^,!\xbf\xc1\x1b\xe5" +
	"kR\xdexw\x93'\xba\xbc\xf9\xfe\xe5&\xb3i\xe4" +
	"\x06\x85nh\x83\x80\xa5*\xde\xe7\x98\xd6\xcb\x8bz\xc2" +
	" H\xce\xb6\xd4\xa0ok\xa3\xdd\x86\xc5J\xc5\xb2;" +
	"\xbe\x13Z6[\xd6'\xef\x81\x84\xd6\xbaL\x14y\x08" +
	"}\x97\x02\x19\xbbF\x96\xf5\xa6\x17k\x86\xe6?\xf56" +
	"\xa7\xe5\x16{\xd0tR\x11^!!_\xce\xd0,\x17" +
	"\x87\x0cQ\xee.\xa2=\x0bt\xf0\xa0pM;\xa5Q" +
	"{\xd1\x92\x82\xceY\xbe\xb5.\xebMX\xbe\x042\xb5" +
	"\xc2\xc9T\xaf\x8f\xd2z(U\xdd\x12\xf2k\x19R\xef" +
	"Q\xa6VQ\xa6z%\xe4\xab\x19\x9ay\xcd\xc8\x19C" +
	"YA\x94\xd4\x00\x0c\x1b\xa8\xe6\x8b\x85~z\x09(\xaa" +
	"\xefF\x085\xa1\xeb\xd5\xcd0\x80\x9f\xaf\x90b5\x96" +
	"\xa9\xb3\x92\xb8{\x05\x0c\x94(V\x83\x8f\x11\x0f\x92E" +
	"\xd5\xb5x+-\x93\x1b\x9c\xbd\xb1\x1a\xeb\xc6\x19\xde\xde" +
	"(\xb3z;\xd8M\x84\xca\xed\x12\xf2\xbb\x89S\xd0w" +
	"\xed\x95\x7f\xdc\x0e\x0cC6y\x0c\x11}\x96$\xe4?" +
	"b\x18\xc9\xeaF5\x15\x11\xbd\x9cq\xd32\xa8m\xa0" +
	"\\\xe8\x84U\xb5\x9a\xfa\xf2Z\xbf\xde1PZ\xd4\xd7" +
	"\xef\x8bi\xfa\x92\xf7\xaeR\xfe\xf8\xd5=\x93\x0f&\xa7" +
	"\xe1\"F9\xd8pT\xcb\x0b%\xe4\xdd\xbe\xd0\x92\x14" +
	"\xc5r\x09\xf9J\x0a\xcd\xc9#\xbf\xd9\xcbc\x8c\x96\x1a" +
	"\x8c{\x7fp83e\xa0\xa8\x1b\xde\xc4q\xaf/\xbe" +
	"M(mh\x06t\xe42\xa4\x85q\xef\xbaWs(" +
	"\xf9\xf2,\xd99\xf1ey\x8e\xb72\xc7\x8cJI`" +
	"\xcc\xfc\xee\xe5\x0f7\x88\xd1\x93\xdb\xc8ZlBn;" +
	"\xd3\xc9\x0e\x9b\xde&\xb9\xf3\xa8l\xb2\xce\x08M\xec\x8c" +
	"\xea8\xb2\xa7Q\xa4R\x12\x01`\xcb\xb5\xfa\xe3F\xaf" +
	"?\\*[\xd5\xeek\x10\x8b\xca\xbas\x05HXs" +
	"\xc0\x1d%%a\xbd\xbe\x09b\xfe\xd7gm\xe43(" +
	"\xdd\xe6[iB\xfa\xd7\xd6\xf2r\x86\x97\xfej\x17\xf3" +
	"\x94\xe3d\xdeO\xff\x11\x1bw?\xed\xc7\x00#\x86\x91" +
	"w\x19\xd5-\x09\xffD\xf3WF\xd3\xa4\x17\xd4\xffy" +
	"As\xef\xf0\xe72\x9b\xa0\xd9S\xf9\x12WUj\x84" +
	"\x8b%\xe4\x97\xb3\xc0Rv\xf6J\x9f@*\x1d\x03\xee" +
	"\xad\xcfwb\xca[\xa2\xaa'\xb6u9'\x12\xa3\x8b" +
	"r\xb9X^T\xb4\x98\xd1\xc9\xf8\xc4\xa0\xdd\xffpj" +
	"\x06\xed+\x82\x9a\x17\xcf\xb3\xe2\xe9\xfe\xdbR\xd3\xf4r" +
	"\x07\x82V-\x1b\xc9\x96u;0;\x0a?\x96VY" +
	"\xb1\xc0\xbe\x1b\xcb\x95\x86/\xad\xee\xe7\xf4\xe3\xeb\xe7^" +
	"\xd6\xbd\xa4\xf9\xea\xb7\xddO_!\x87\xbef\xf8\x8a\x9a" +
	"\xf5\xda\xa7\xf7,\xf0\x8a\xfa\xcc\xb6\xf1_\xf2;r\xfa" +
	"\xa2bYTw\xd7\xff\x06\x00\x00\xff\xffe\xd5\x888"

func init() {
	schemas.Register(schema_8f4bd412642c9517,
		0x877af4eba6adb0f3,
		0x88b4277fa83dde2d,
		0x8adfcabe5ff9daf4,
		0x8f8172e4469c111a,
		0x91ea9bb47f46c346,
		0x947e1828e214e89d,
		0x95794035a80b7da1,
		0x9b0685a785df42e9,
		0x9bce05e1e88ad9da,
		0xa5cff7314a4335e5,
		0xa94f085c31a03112,
		0xacf8185a51a9f1b4,
		0xb21a270577932520,
		0xb47c95e958cccfff,
		0xb7cede732308e432,
		0xc340ede57616f2e8,
		0xc4c61531dcc4a3eb,
		0xc5ff2e54709776ec,
		0xca1e844241cf650f,
		0xcc65a2a89c24e6a5,
		0xd7c92876b75c115d,
		0xe7279389a6bbe1dc,
		0xe7f7d11a5652e06c,
		0xf0c5156786d72738,
		0xf10fe9b6293ee63f,
		0xf7a6d78ba978beb9,
		0xf9e52567abde1a0c,
		0xfab1a3b4477ab6b3)
}
